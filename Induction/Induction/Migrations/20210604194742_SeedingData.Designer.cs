// <auto-generated />
using System;
using Induction.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Induction.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210604194742_SeedingData")]
    partial class SeedingData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Induction.Models.BookModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "C# in Depth, Fourth Edition",
                            Url = "https://www.oreilly.com/library/view/c-in-depth/9781617294532/"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Head First C#, 4th Editio",
                            Url = "https://www.oreilly.com/library/view/head-first-c/9781491976692/"
                        });
                });

            modelBuilder.Entity("Induction.Models.ChapterChunkModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrentPage")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("ChapterChunks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "what is deep coding and why",
                            ChapterId = 2,
                            CreatedAt = new DateTime(2021, 6, 4, 22, 47, 42, 434, DateTimeKind.Local).AddTicks(8554),
                            CurrentPage = 23,
                            Title = "Deep Coding"
                        },
                        new
                        {
                            Id = 2,
                            Body = "a small intro ",
                            ChapterId = 1,
                            CreatedAt = new DateTime(2021, 6, 4, 22, 47, 42, 434, DateTimeKind.Local).AddTicks(9011),
                            CurrentPage = 12,
                            Title = "intro"
                        });
                });

            modelBuilder.Entity("Induction.Models.ChapterModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Chapters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            Title = "Introduction"
                        },
                        new
                        {
                            Id = 2,
                            BookId = 1,
                            Title = "Deep Coding"
                        });
                });

            modelBuilder.Entity("Induction.Models.FactModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Attachment")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Facts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Attachment = "https://www.w3schools.com/cs/cs_oop.asp",
                            Body = "C# is OOP",
                            CreatedAt = new DateTime(2021, 6, 4, 22, 47, 42, 434, DateTimeKind.Local).AddTicks(3221),
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Attachment = "https://edu.rsc.org/resources/tyndall-effect-why-the-sky-is-blue/1877.article",
                            Body = "Tyndall effect- why the sky is blue",
                            CreatedAt = new DateTime(2021, 6, 4, 22, 47, 42, 434, DateTimeKind.Local).AddTicks(3743),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Induction.Models.FlashCardModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("FlashCards");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Answer = "The abstract keyword enables you to create classes and class members that are incomplete and must be implemented in a derived class. ",
                            Question = "What is an abstract Keyword?"
                        },
                        new
                        {
                            id = 2,
                            Answer = "A delegate is a reference type that can be used to encapsulate a named or an anonymous method.",
                            Question = "Delegate "
                        });
                });

            modelBuilder.Entity("Induction.Models.MotivationModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.ToTable("Motivations");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Body = "Too many of us are not living our dreams because we are living our fears. —Les Brown",
                            CreatedAt = new DateTime(2021, 6, 4, 22, 47, 42, 433, DateTimeKind.Local).AddTicks(4512),
                            UserId = 2
                        },
                        new
                        {
                            id = 2,
                            Body = "If you really want the key to success, start by doing the opposite of what everyone else is doing. —Brad Szollose",
                            CreatedAt = new DateTime(2021, 6, 4, 22, 47, 42, 434, DateTimeKind.Local).AddTicks(2169),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Induction.Models.QouteModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Quotes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "Stay Focused"
                        },
                        new
                        {
                            Id = 2,
                            Body = "Keep it going"
                        });
                });

            modelBuilder.Entity("Induction.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Mansoviic@gmail.com",
                            Name = "Mansovic",
                            Password = "P@assWord123"
                        },
                        new
                        {
                            Id = 2,
                            Email = "Mansoviic2@gmail.com",
                            Name = "Mansovic2",
                            Password = "P@assWord1232"
                        });
                });

            modelBuilder.Entity("Induction.Models.ChapterChunkModel", b =>
                {
                    b.HasOne("Induction.Models.ChapterModel", "Chapter")
                        .WithMany("ChapterChuncks")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Induction.Models.ChapterModel", b =>
                {
                    b.HasOne("Induction.Models.BookModel", "Book")
                        .WithMany("Chapters")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Induction.Models.FactModel", b =>
                {
                    b.HasOne("Induction.Models.UserModel", "User")
                        .WithMany("Facts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Induction.Models.MotivationModel", b =>
                {
                    b.HasOne("Induction.Models.UserModel", "User")
                        .WithMany("Motivations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
